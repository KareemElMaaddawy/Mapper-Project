/* 
 * Copyright 2021 University of Toronto
 *
 * Permission is hereby granted, to use this software and associated 
 * documentation files (the "Software") in course work at the University 
 * of Toronto, or for personal use. Other uses are prohibited, in 
 * particular the distribution of the Software either publicly or to third 
 * parties.
 *
 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#include <iostream>
#include <string>
#include "globalHeader.h"
#include "pathFinding.h"
#include "m1.h"
#include "m2.h"
#include "m3.h"
#include "m4.h"
//Program exit codes
constexpr int SUCCESS_EXIT_CODE = 0;        //Everyting went OK
constexpr int ERROR_EXIT_CODE = 1;          //An error occured
constexpr int BAD_ARGUMENTS_EXIT_CODE = 2;  //Invalid command-line usage

//The default map to load if none is specified
std::string default_map_path = "/cad2/ece297s/public/maps/toronto_canada.streets.bin";
//std::string defaultOSMFilePath = "/cad2/ece297s/public/maps/interlaken_switzerland.osm.bin";

void tester() {
    std::vector<StreetSegmentIdx> path;
    float turn_penalty;
    double expected;
    double actual;

    
//    std::vector<DeliveryInf> deliveries;
//    std::vector<IntersectionIdx> depots;
//    std::vector<CourierSubPath> result_path;
//    
//        std::cout << "result path: ";
//        deliveries = {DeliveryInf(25800, 30752)};
//        depots = {6};
//        turn_penalty = 15.000000000;
//        result_path = travelingCourier(deliveries, depots, turn_penalty);
//        for(int i = 0; i < result_path.size(); i++){
//            path = result_path[i].subpath;
//            for(int j = 0; j < path.size(); j++){
//                std::cout << path[i] <<" ";
//                std:: cout << std::endl;
//            }
//        }
//         
//        
//        //CHECK(courier_path_is_legal(deliveries, depots, result_path));
        
        
    path = {113738, 183123, 148635, 183599, 165771, 165772, 144545, 180349, 180348, 26490, 26491, 26492, 26493, 21815, 21816, 183119, 183116, 183118, 113076, 113077, 113078, 113079, 113080, 82995, 181338, 82993, 181340, 181339, 166309, 181336, 163933, 181337, 176295, 176296, 176297, 176298, 163923, 163924, 163925, 163926, 163927, 85789, 85815, 105581, 22794, 22795, 22796, 22797, 22798, 22799, 22800, 22801, 22802, 22803, 22804, 22805, 22806, 22807, 22819, 22820, 22821, 22822, 22823};
    turn_penalty = 44.58619277333233555;
    expected = 332.98105652274381328;
    actual = computePathTravelTime(path, turn_penalty);
    
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {204956, 88400, 161115, 183152, 183150, 161122, 207541, 207542, 182393, 182391, 182395, 182396, 6840, 122322, 113820, 113819, 24564, 421, 113627, 122311, 207702, 208057, 214167, 214158, 214157, 113134, 182413, 182414, 27437, 122310, 182472, 67715, 67716, 67733, 67734, 67666, 67690, 67680, 164898, 164899, 164900, 164901, 26339};
    turn_penalty = 0.00000000000000000;
    expected = 425.66745682289530350;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {208138, 184347, 184348, 85743, 85744, 85745, 208239, 183078, 28423, 183072, 52301, 52302, 183073, 183062, 183068, 52288, 52289, 52290, 52291, 68566, 68567, 68554, 68555, 68556, 68557, 22332, 113024, 113023, 113022, 113021, 211879, 211878, 113027, 113026, 113025, 180475, 180474, 180478, 184331, 208019, 208018, 208017, 208016, 113020, 113019, 113018, 113017, 113016, 19077, 19076, 19075, 19074, 207937, 207938, 207939, 207940, 207941, 207942, 207943, 207944, 207945, 76932, 76928, 76922, 76921, 76920};
    turn_penalty = 30.33507082458857695;
    expected = 548.54970237507404818;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {189612, 189623, 189622, 189621, 189620, 189609, 164669, 96156, 96155, 164667, 164666, 66129, 66124, 66134, 66137, 66138, 66139, 66140, 66156, 66150, 66153, 66151, 65505, 65504, 65503, 65502, 65501, 65500, 65499, 65498, 65497, 65493, 65492, 218317, 218316, 218315, 218312, 218313, 218314, 218304, 65490, 65489, 65488, 65487, 65486, 65485, 65484, 65483, 65482, 65481, 65464, 65472, 65479, 65480, 143493, 143494, 143491, 143492, 143489, 143490, 28467, 26935, 26936, 143497, 143495, 143496, 164677, 165859, 216588, 216587, 216584, 216585, 216511, 216512, 165860, 165861, 165862, 165863, 182087, 16766, 16767, 16768, 16769, 16770, 16771, 185481, 182098, 185480, 182094, 182095, 182096, 182097, 20089, 140795, 182156, 182155, 113147, 113148, 113149, 207101, 207102, 183968, 66766, 66757, 66763, 66745, 66752, 216173, 216172, 216164, 216181, 216180, 216179};
    turn_penalty = 7.37650832194864137;
    expected = 606.22265383447881959;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {127441, 127440, 127452, 143992, 143991, 95099, 72316, 72323, 72314, 72315, 72326, 72327, 72295, 71732, 71748, 72301, 144006, 144007, 177303, 177304, 177305, 177306, 177307, 177298, 177302, 177299, 177297, 144008, 144009, 144010, 144011, 144012, 144013, 144014, 144015, 71488, 71487, 71495, 71496, 71497, 71503, 71504, 71506, 71510, 71516, 71513, 71519, 71520, 104715, 104713, 104714, 68866, 68864, 34343, 99882, 68875, 68876, 154337, 154338, 68870, 68871, 68872, 25755, 25751, 25752, 25753, 25754, 34338, 34339, 153232, 153233, 153234, 153235, 153229, 153230, 153231, 153227, 153228, 171962, 171974, 171975, 171976, 171977, 171978, 171979, 171980, 171981, 171982, 171983, 171984, 68885, 68886, 68887, 25750, 25748, 25749, 68888, 68891, 68893, 104735, 104736, 104737, 104724, 104732, 104733, 104734, 165360, 153124, 58337, 58336, 58280, 58311, 58281, 58319, 58318, 58303, 58272, 58279, 58287, 58316, 58284, 58216, 58220, 58226, 58516, 58515, 58578, 58577, 58576, 58495, 58543, 58482, 58443, 58444, 58457, 78185, 58456, 49712, 48321, 50927, 50143};
    turn_penalty = 3.42981905088287276;
    expected = 750.67064895110956968;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {115783, 115825, 93492, 93406, 93479, 93477, 93493, 93519, 93511, 93510, 93509, 93508, 93400, 93524, 93551, 93550, 93549, 93548, 93547, 93546, 93545, 93544, 151761, 151760, 151759, 151758, 151757, 151756, 151755, 151754, 151753, 151752, 181377, 96089, 96088, 96087, 96097, 96108, 96095, 177618, 177617, 177616, 96109, 96077, 96135, 96117, 96116, 96132, 96110, 96106, 96105, 96104, 96103, 96102, 96127, 148664, 96093, 96062, 96129, 96128, 96076, 96060, 207415, 183760, 183759, 183761, 183762, 207494, 183758, 183757, 150456, 125038, 125030, 125029, 125028, 125027, 125026, 177969, 177968, 177974, 177973, 177972, 125031, 125032, 95995, 95997, 165894, 95996, 7377, 33314, 33315, 125209, 125210, 177416, 177417, 127359, 118060, 118059, 84879, 72899, 72898, 72897, 72896, 72893, 81627, 81626, 72918, 72917, 72916, 72915, 72914, 72912, 72903, 72909, 24640, 24639, 24638, 24637, 24636, 72844, 72843, 72842, 72841, 72825, 72836, 72840, 72839, 72838, 72830, 72835, 72823, 72819, 72812, 72820, 134607, 72811, 72810, 72809, 72798, 72804, 72797, 72796, 72794, 72793, 24611, 24610, 72790, 72789, 72784, 72787, 138747, 138746, 138745, 182793, 66645, 66639, 49145, 46963, 66641, 176308, 159075, 159074, 176336, 144084, 144083, 102197, 102200, 145818, 56603, 56602, 56601, 56600, 56599, 56598, 56597, 56596, 56592, 56594, 141147, 141146, 141143, 141144, 140129, 140128, 33312, 56619, 56620, 56618, 141121, 178527, 141122, 56622, 182841, 182840, 182839, 55718, 55717, 55716, 55680, 217300, 217301, 111964};
    turn_penalty = 6.80727553984314948;
    expected = 965.35175074705409770;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {101078, 101079, 101080, 13146, 13147, 13148, 160194, 160193, 101099, 101100, 101101, 217690, 217683, 12999, 12996, 12997, 12998, 218073, 593, 594, 210157, 45328, 135669, 160124, 160123, 160122, 135671, 163197, 163198, 208846, 218341, 135193, 135192, 26582, 26583, 153189, 81441, 153188, 45183, 105926, 105927, 111244, 159127, 159128, 105928, 121951, 395, 134418, 134419, 174818, 174819, 174817, 129809, 134488, 134578, 134579, 134573, 134571, 134572, 134430, 134429, 130578, 130574, 136141, 136142, 130483, 130479, 129841, 129840, 129838, 10033, 159261, 44158, 44159, 44156, 44155, 44157, 71013, 71012, 71011};
    turn_penalty = 25.71679010554763423;
    expected = 983.35539525022409180;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {88738, 88739, 88740, 88741, 176297, 176298, 163923, 163924, 116544, 116545, 116546, 181155, 181154, 181153, 181152, 181151, 207754, 181149, 181150, 181304, 113274, 113275, 113276, 181306, 181305, 181297, 181294, 181296, 181295, 23886, 54623, 54622, 54621, 54620, 23148, 75913, 75899, 75908, 75909, 111742, 111743, 111744, 168475, 44866, 44865, 44864, 44863, 44862, 75892, 75891, 75890, 75878, 75885, 75887, 75877, 75876, 75875, 75874, 75852, 75857, 75864, 75860, 156367, 156366, 156365, 10238, 10237, 10234, 154616, 154617, 112020, 154503, 113140, 10249, 10244, 112022, 113151, 213891, 213892, 122393, 5468, 113253, 5481, 5480, 5469, 5404, 5405, 52449, 12347, 12348, 12349, 105670, 105671, 12696, 12697, 178842, 165486, 124460, 173659, 124462, 124463, 124464, 124465, 124466, 124467, 124468, 203534, 203547, 203545, 203533, 30398, 30399, 182205, 182210, 182212, 182208, 182209, 182075, 182071, 182076, 182077, 182078, 182070, 182072, 182073, 182074, 171941, 171942, 34520, 187176, 28712, 171943, 28162, 28163, 28713, 171958, 171957, 171956, 171955};
    turn_penalty = 13.23117671407310247;
    expected = 1033.63307445804275631;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {87940, 87941, 25421, 205741, 205742, 205743, 205744, 205745, 185288, 185286, 185285, 129933, 129934, 129935, 129936, 129937, 129938, 129939, 185030, 167819, 167820, 167821, 179435, 173373, 181915, 108910, 108921, 108925, 108926, 108915, 108916, 108918, 108906, 108907, 108909, 206476, 108895, 108898, 205858, 108908, 118113, 173221, 108892, 108893, 108894, 108899, 108900, 88081, 88082, 88078, 88084, 88087, 88091, 88088, 135452, 135428, 135429, 181821, 181824, 181825, 135450, 135451, 163638, 136190, 182048, 182051, 163641, 163642, 135525, 135521, 135522, 135523, 135524, 182043, 182044, 182042, 136189, 206257, 206258, 135448, 135449, 186098, 130078, 186093, 186094, 212478, 212479, 186089, 52159, 112047, 66739, 66738, 97508, 97512, 97507, 97509, 133774, 97510, 97511, 20100, 176073, 20099, 28158, 28159, 176074, 28204, 46121, 168511, 46125, 46024, 46023, 46022, 46021, 46020, 46019, 46018, 46017, 62609, 62608};
    turn_penalty = 33.45806031895191524;
    expected = 1049.15020258081995053;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {170043, 184129, 184130, 103117, 103118, 170036, 77581, 77600, 77572, 77573, 77603, 77591, 77576, 77605, 77597, 82365, 82366, 82367, 170593, 180666, 180664, 180662, 98249, 77025, 77026, 77048, 77047, 77016, 77021, 77020, 77019, 77043, 77009, 132485, 132484, 132483, 132482, 77034, 77033, 77036, 54480, 54479, 52208, 173506, 101343, 19069, 19070, 173510, 173512, 19072, 19073, 52207, 53683, 53684, 173517, 173519, 173520, 173521, 173522, 113042, 82380, 82381, 82382, 82426, 82407, 82391, 82392, 82393, 82423, 82435, 82436, 82525, 82526, 82527, 82528, 82529, 82539, 82540, 82537, 82522, 23170, 23169, 68537, 68538, 183051, 183052, 179688, 179690, 179691, 213407, 113043, 113044, 114006, 113038, 113039, 208036, 208037, 183388, 113280, 113281, 164856, 68528, 68543, 52288, 52289, 52290, 52291, 68566, 68567, 68554, 68555, 68556, 68557, 68558, 22333, 207710, 207711, 218645, 183835, 183837, 22577, 22573, 16940, 114031, 114032, 114033, 16943, 16944, 16947, 16948, 16945, 86819, 86818, 86817, 86816};
    turn_penalty = 44.77880467381613983;
    expected = 1122.46595038419741286;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {196823, 196822, 196821, 196820, 209828, 209827, 209826, 16185, 16184, 16183, 16182, 16181, 16180, 16179, 16178, 16177, 16176, 16175, 16174, 16173, 27982, 27981, 27980, 27979, 27978, 27977, 27976, 27975, 27974, 27973, 27972, 27971, 15134, 123419, 8737, 5053, 15141, 37382, 37383, 37384, 141136, 37365, 37366, 37367, 138732, 127495, 80896, 80897, 80890, 80889, 80888, 100116, 80874, 138724, 138727, 138729, 138726, 8740, 27183, 110494, 27181, 27182, 110498, 101288, 122397, 126068, 184499, 10581, 10582, 184500, 184498, 110503, 110505, 22187, 22188, 126077, 126078, 126076, 566, 100106, 22216, 22217, 100109, 100110, 100111, 26838, 26839, 26848, 171934, 16747, 110521, 164871, 28465, 16755, 16752, 212934, 212928, 212929, 212932, 164621, 151123, 151122, 151121, 151120, 151119, 151118, 28706, 160784, 28705, 28459, 28460, 183447, 28082, 28695, 28694, 28693, 28692, 28691, 28690, 210544, 210543, 210553, 210552, 210551, 210550, 210549, 210548, 210547, 210546, 210545, 28689, 28688, 28497, 28498, 28499, 182310, 28496, 212923, 212924, 182330, 182329, 182328, 182327, 182326, 182325, 182324, 182323, 182322, 182321, 182320, 182319, 182318, 182317, 182316, 182315, 182314, 65943, 65942, 65959, 65956, 65970};
    turn_penalty = 23.17018073295285063;
    expected = 1201.22493710867138361;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {12569, 12570, 12576, 110905, 110906, 82633, 69504, 69506, 3486, 82635, 112094, 112092, 112097, 161849, 110900, 110899, 110898, 110897, 110896, 110892, 110891, 110213, 84974, 110893, 110889, 110890, 161843, 161836, 161837, 161838, 161839, 161840, 161841, 161842, 133707, 121610, 121611, 134627, 134624, 134623, 84975, 13579, 13578, 13577, 13576, 13575, 13574, 13573, 13572, 13571, 13570, 13569, 6028, 155372, 6031, 37376, 37377, 151402, 151403, 37387, 15135, 9044, 9045, 9046, 121952, 0, 165240, 165241, 213374, 15147, 7810, 102106, 110363, 110364, 568, 110371, 110372, 110373, 60316, 60317, 13212, 13213, 13214, 13241, 13239, 13240, 60791, 60792, 60793, 60772, 60773, 213196, 112494, 112495, 569, 570, 82276, 82277, 136823, 112477, 124980, 151386, 13334, 13333, 151383, 151384, 138062, 150780, 150781, 102720, 102713, 572, 573, 574, 102692, 2217, 171030, 171029, 138146, 138148, 9015, 9016, 8880, 8881, 13266, 132098, 132099, 132100, 59261, 82610, 82607, 82608, 82609, 138304, 87266, 87267, 8879};
    turn_penalty = 17.54021232368053873;
    expected = 1227.38828076555887492;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {154277, 14174, 85628, 85629, 154408, 154411, 154412, 45182, 45181, 30545, 110427, 110428, 149994, 163195, 679, 162097, 165253, 117843, 159122, 165252, 38288, 511, 9033, 9032, 67134, 67135, 67136, 177761, 11408, 11405, 17979, 17980, 17981, 17998, 17999, 17986, 17987, 13064, 13065, 18003, 18004, 510, 67142, 67143, 110399, 110400, 4936, 4937, 93268, 93272, 7662, 96274, 21411, 21412, 7664, 21393, 1246, 1247, 111287, 111288, 27062, 27063, 123298, 113087, 45592, 45593, 123301, 123302, 21544, 21545, 21546, 123305, 101323, 101321, 32058, 125223, 165676, 165677, 180681, 212752, 212756, 180667, 32071, 208026, 208027, 208028, 208029, 208030, 180672, 180669, 180673, 180679, 98995, 98996, 98997, 98998, 98999, 99000, 99001, 99009, 99010, 99025, 99026, 99027, 99028, 99029, 99030, 99031, 99032, 99033, 99034, 99035, 99024, 105380, 164868, 164869, 98905, 98906, 98907, 98908, 184213, 209033, 95973, 95970, 95969, 95968, 98902, 98903, 98904, 105323, 105324, 52131, 105368, 105369, 105370, 105373, 105374, 52132, 52133, 52134, 79745, 79748, 79749, 103388, 103389, 103390, 103371, 103392, 103393, 103377, 103378, 25080, 25081, 26245, 26246, 103413, 103423, 103424, 103425, 103433, 103432};
    turn_penalty = 12.22740171002416254;
    expected = 1264.42960588759933671;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {134348, 134347, 136400, 136401, 136395, 207545, 207548, 207547, 207546, 161117, 161116, 161115, 183152, 183150, 161122, 161123, 183151, 207542, 182393, 182391, 182395, 182396, 6840, 122322, 113820, 113819, 24563, 24565, 24566, 113991, 558, 559, 214170, 5475, 5474, 122301, 135009, 135008, 26921, 26922, 26925, 26926, 133261, 555, 556, 565, 110540, 82967, 82955, 110543, 110539, 110525, 11448, 82949, 82947, 106357, 138878, 29548, 16757, 16753, 16750, 16751, 28462, 168562, 16759, 169232, 99750, 99751, 99752, 99753, 99754, 99755, 99756, 99757, 99758, 99759, 99760, 99761, 99762, 99763, 99764, 62426, 62427, 62428, 62420, 62431, 62424, 62425, 175159, 62433, 62434, 175160, 175161, 62421, 62445, 175163, 175162, 62446, 62437, 62416, 62417, 62418, 175165, 62435, 62436, 62438, 62439, 62440, 62441, 62442, 62443, 62444, 63264, 63263, 63268, 62745, 62701, 62664, 63239, 62759, 62739, 62859, 62778, 62963, 62771, 63174, 62807, 62949, 62940, 62968, 63154, 204647};
    turn_penalty = 19.17228723490339704;
    expected = 1362.83986309344982146;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {7811, 102107, 535, 11774, 110373, 60316, 60317, 13212, 13213, 2317, 110387, 136652, 165329, 165330, 13237, 13250, 13249, 2314, 13247, 13248, 13219, 13220, 60310, 60311, 110386, 110385, 110380, 110369, 110370, 165242, 165243, 165244, 102104, 15145, 15144, 7809, 122391, 213372, 213373, 567, 121953, 9038, 9039, 37381, 37382, 37383, 37384, 141136, 37365, 37366, 37367, 138732, 127495, 80896, 80897, 80890, 80889, 80888, 100116, 80874, 138724, 138727, 138729, 138726, 8740, 27183, 110494, 27181, 27182, 110498, 101288, 122397, 126068, 184499, 10581, 10582, 184500, 184498, 110503, 110505, 22187, 22188, 15403, 103302, 181593, 165507, 126080, 126081, 15397, 178110, 181954, 15395, 15396, 178112, 178106, 15391, 15392, 178534, 178535, 178536, 178537, 178538, 181957, 181955, 181956, 64769, 178531, 178528, 64768, 64775, 64754, 64765, 64779, 847, 848, 849, 850, 851, 852, 853, 854, 151137, 151138, 151139, 180141, 151140, 151141, 151142, 151143, 151144, 182431, 182430, 28577, 28578, 845, 28595, 101980, 134672, 15378, 15379, 15380, 15377, 126779, 126781, 163283, 34806, 34807, 130818, 130819, 130820, 212909, 212908, 15382, 15383, 15384, 15385, 66395, 134662, 66396, 66392, 66404, 28495, 180972, 11442, 180968, 180971, 5391, 180970, 180979, 180983, 180985, 180986, 180987, 183861, 28078, 183860, 28079, 11441};
    turn_penalty = 0.00000000000000000;
    expected = 1367.51003422546887123;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {62072, 62035, 61995, 62033, 61985, 28163, 28162, 171943, 28712, 187176, 34520, 171942, 171941, 182074, 182073, 182072, 182070, 182079, 182080, 182081, 182082, 182209, 182208, 182211, 182213, 182205, 30399, 30398, 30397, 7961, 144225, 144226, 69364, 69365, 69361, 69362, 69363, 26942, 26943, 26944, 26945, 26946, 26947, 26948, 26949, 161633, 136697, 136698, 12679, 12688, 122300, 5473, 560, 214169, 122290, 562, 213379, 113824, 113821, 84507, 563, 3545, 28313, 215990, 215991, 28314, 110640, 28315, 3546, 110638, 216922, 110639, 54463, 54466, 6817, 23382, 23381, 23371, 23370, 110650, 22938, 22617, 6848, 110649, 210756, 112016, 22019, 85941, 22016, 10686, 52287, 22004, 22003, 102231, 102410, 21964, 164863, 164864, 125634, 183072, 52301, 52302, 68532, 68529, 68546, 68547, 68548, 113279, 183387, 146033, 146034, 208038, 86211, 86206, 86205, 86204, 86207, 98252, 151670, 151671, 151672, 151673};
    turn_penalty = 24.49227607808817098;
    expected = 1443.46132265070514222;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {153008, 153007, 153006, 153005, 153004, 153003, 180809, 153002, 6599, 6598, 6597, 210070, 3375, 134578, 134579, 134573, 134571, 134572, 134430, 134429, 130578, 130574, 136141, 136142, 130483, 130479, 129841, 129840, 129838, 129803, 129804, 129805, 129813, 129810, 129802, 129800, 129765, 129763, 129764, 129760, 129761, 129762, 176119, 176118, 114399, 114394, 114395, 114396, 110435, 110436, 110433, 441, 26745, 26746, 26747, 54490, 23, 93185, 116232, 93186, 93187, 22, 24, 116388, 25, 116390, 138052, 116386, 110441, 135096, 135103, 135104, 135098, 135102, 177167, 135099, 135100, 135101, 116398, 116399, 1553, 17605, 17603, 17604, 77965, 17636, 126704, 108170, 173530, 126703, 173529, 138497, 138498, 212601, 86401, 86400, 125594, 125595, 125596, 34403, 34404, 110994, 86618, 137607, 7390, 7391, 148831, 213249, 110997, 125203, 83591, 213253, 213252, 213251, 213250, 83587, 6005, 128577, 148401, 6008, 82683, 82684, 145079, 145072, 120552, 120553, 161883, 161882, 161881, 181774, 181767, 120559, 181768, 181783, 181779, 181781, 181778, 181765, 181766, 120561, 181782, 181777, 181770, 181769, 209764, 209765, 120563, 209766, 120558, 120551, 120550, 181210, 156475, 156476, 156477, 160205, 160201, 160202, 178229, 178230, 178231, 178232, 178233, 178234, 178235, 178236, 178237, 178238, 178324, 178325, 178326, 178327, 178328, 178329, 178330, 178331, 199965, 200011, 200012, 200013, 200014};
    turn_penalty = 1.91719144730037305;
    expected = 1692.65076685852386618;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {103243, 29385, 23170, 82541, 82531, 82520, 82512, 82488, 82396, 22010, 6857, 6858, 159222, 159223, 6877, 110664, 114008, 110658, 22015, 22013, 22014, 110652, 22616, 22615, 110653, 23369, 23379, 23383, 23380, 23377, 6826, 111286, 110641, 54468, 44089, 28311, 28312, 28623, 122321, 122322, 113820, 113819, 24563, 24565, 24566, 113991, 558, 559, 214170, 5475, 5474, 122301, 135009, 135008, 26921, 26922, 26925, 26926, 133261, 555, 556, 565, 110540, 82967, 82955, 110543, 110539, 110525, 110528, 82950, 82946, 110526, 110527, 26840, 26841, 110522, 26830, 26831, 26826, 26827, 144229, 144230, 100107, 110510, 22210, 22211, 110512, 110511, 6022, 126074, 126075, 110518, 110519, 22193, 22194, 110504, 100108, 113340, 8748, 110491, 110490, 110492, 100127, 110493, 27175, 27176, 27188, 27189, 6037, 6038, 138725, 138730, 138728, 80875, 138731, 80876, 3604, 83765, 133806, 83762, 182466, 138101, 138100, 138099, 138098, 138097, 138096, 138095, 83811, 83815, 137768, 137769, 137770, 83807, 83796, 83797, 83798, 83799, 83800, 83795, 83789, 83790, 165435, 83786, 83788, 83785, 83787, 144691, 65, 64, 63, 62, 61, 60, 210099, 134040, 134039, 134038, 134037, 134036, 134035, 134034, 134033, 134032, 85303, 145787, 85302, 85301, 85300, 82344, 82343, 83325, 83324, 83323, 83335, 83334, 85146, 85147, 12605, 12604, 85149, 185423};
    turn_penalty = 19.45167864269119207;
    expected = 1840.68478427314312285;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {94139, 94138, 94137, 93924, 94133, 93752, 94046, 94045, 93996, 93765, 93818, 93817, 93816, 93815, 93821, 93945, 93690, 94022, 89926, 89927, 44219, 187628, 118040, 118041, 1530, 1531, 118024, 180016, 118035, 123031, 2852, 2851, 123028, 15421, 15420, 15430, 863, 123029, 100120, 100121, 9745, 9746, 9747, 134653, 134654, 1510, 1511, 118000, 19092, 100111, 26838, 26839, 26848, 171934, 26842, 110523, 82953, 82944, 110524, 110529, 110530, 11481, 82961, 82962, 110545, 110546, 5472, 12681, 12686, 12689, 12687, 12688, 5470, 5471, 5399, 5461, 5460, 5462, 5463, 5443, 5442, 5435, 122297, 423, 424, 425, 123334, 123335, 10219, 10225, 28017, 28018, 21423, 21419, 7667, 21398, 21399, 21366, 21367, 21377, 21376, 1247, 111287, 111288, 27062, 27063, 123298, 113087, 45592, 45593, 123301, 25776, 123243, 210746, 210747, 210748, 129253, 17648, 164835, 164836, 148801, 148802, 148803, 148804, 148805, 148806, 148807, 136848, 136843, 136844};
    turn_penalty = 20.94736646101775435;
    expected = 1854.40848972157209573;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {104752, 104790, 104773, 104774, 104791, 209639, 104793, 209638, 104762, 153149, 153150, 117989, 104811, 104813, 119604, 60833, 119292, 119295, 119294, 111897, 116221, 17630, 17629, 136450, 126703, 173529, 138497, 138498, 212601, 86401, 86400, 125594, 125595, 125596, 34403, 34404, 110994, 86618, 137607, 7390, 7391, 148831, 213249, 110997, 125203, 83591, 213253, 213252, 213251, 213250, 83587, 83588, 83589, 83590, 23231, 23232, 23209, 23210, 128099, 32971, 148832, 148833, 23212, 23211, 115384, 126702, 101390, 2878, 1538, 100126, 115383, 100101, 115379, 115380, 115381, 11565, 11830, 90140, 90143, 34515, 12333, 131875, 26124, 26121, 159239, 159240, 12328, 175048, 12329, 206466, 12325, 175044, 206463, 187668, 12326, 187666, 187667, 12320, 207210, 207211, 12317, 12318, 12319, 167705, 12314, 207097, 167714, 167715, 12315, 12316, 167712, 167713, 167711, 12311, 215831, 149897, 12310, 215832, 34499, 34498, 34497, 167881, 91996, 180898, 180897, 180865, 80466, 180866, 167872, 180867, 180890};
    turn_penalty = 34.77809088384424285;
    expected = 1862.29544181906589984;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {52533, 11312, 11311, 188611, 188612, 152516, 152517, 152518, 81256, 188529, 188530, 188531, 188532, 188533, 188528, 81257, 81258, 81259, 81260, 81261, 81682, 81683, 81684, 81685, 81686, 81712, 81713, 81714, 81715, 81716, 81717, 182919, 182924, 185366, 115322, 115323, 115324, 115325, 115326, 115327, 115328, 180728, 180727, 182928, 185403, 185404, 182921, 1640, 1641, 1642, 1643, 182922, 182923, 182920, 136211, 136212, 136213, 136201, 136202, 136203, 136204, 136205, 136206, 136207, 136208, 136209, 136210, 210650, 210651, 186074, 186075, 182926, 182927, 186078, 186079, 188173, 182925, 210125, 210124, 210123, 210122, 210121, 101035, 101034, 101033, 101032, 101031, 10031, 614, 615, 616, 617, 618, 619, 620, 621, 501, 500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 101370, 101371, 101372, 101373, 101374, 101375, 101376, 101377, 101378, 101379, 101380, 101381, 13164, 132050, 132051, 102077, 9831, 159122, 165252, 38288, 511, 9033, 9032, 67134, 67135, 67136, 177761, 11408, 11405, 17979, 17980, 17981, 17998, 17999, 17986, 17987, 13064, 13065, 18003, 18004, 510, 67142, 67143, 110399, 110400, 4936, 4937, 93268, 93272, 7662, 96274, 21411, 21412, 7664, 21393, 1246, 1247, 111287, 111288, 27062, 27063, 123298, 113087, 45592, 45593, 123301, 123302, 21544, 21545, 21546, 123305, 101323, 101321, 125189, 28426, 28427, 26308, 26307, 123229, 123238, 1248, 1249, 123239, 22376, 134918, 22377, 123232, 123240, 8071, 123227, 23350, 123224, 207582, 180461, 180462, 180463, 131164, 131165, 131166, 131167, 131168, 207580, 165675, 44309, 180445, 180439, 180440, 180442, 208240, 123260, 123261, 123251, 123252, 123253, 123254, 123255, 123256, 123257, 123258, 123259, 176327, 131288, 184127, 131281, 131282, 131283, 131284, 131285, 131286, 131287, 167764, 25195};
    turn_penalty = 26.06136747164376999;
    expected = 1867.07413848790611155;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {137936, 137935, 137934, 71032, 176519, 176520, 136230, 136231, 134430, 134429, 130578, 130574, 136141, 136142, 130483, 130479, 129841, 129840, 129838, 129803, 129804, 129805, 129813, 129810, 129802, 129800, 129765, 129763, 129764, 129760, 129761, 129762, 176119, 176118, 114399, 114394, 114395, 114396, 110435, 110436, 110433, 441, 26745, 26746, 26747, 54490, 23, 93185, 116232, 7, 144, 15146, 6, 102106, 110363, 110364, 568, 110371, 110372, 110373, 60316, 60317, 13212, 13213, 13214, 13241, 13239, 13240, 60791, 60792, 60793, 60772, 60773, 213196, 112494, 112495, 569, 570, 82276, 82277, 136823, 112477, 124980, 151386, 13334, 13333, 151383, 151384, 138062, 150780, 150781, 102720, 102713, 572, 573, 574, 102692, 102687, 102689, 112751, 112479, 102674, 9004, 9003, 9011, 9012, 102673, 102672, 102683, 102684, 102679, 8866, 8867, 102353, 110204, 102349, 102350, 102351, 102352, 110303, 110191, 548, 110185, 102535, 106033, 93680, 93678, 18906, 106031, 106029, 102455, 102491, 213371, 102483, 102464, 102465, 153682, 153683, 153684, 102443, 102500, 153732, 102466, 153730, 153731, 102532, 102434, 102442, 173869, 48340, 51622, 50495, 47230, 47231, 49775, 152446, 47067, 59702};
    turn_penalty = 18.53930724171296163;
    expected = 2039.88379313418408856;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {82150, 184126, 82149, 82156, 213482, 213481, 213480, 213485, 213484, 213483, 160891, 160890, 160889, 160888, 218259, 144719, 144720, 144721, 144717, 135201, 165215, 165216, 338, 128, 110430, 11036, 105921, 105922, 159123, 105924, 105920, 105923, 30545, 110427, 110428, 149994, 163195, 679, 162097, 165253, 117843, 159122, 165252, 38288, 511, 9033, 9032, 67134, 67135, 67133, 107760, 107757, 185297, 185298, 11402, 11403, 185296, 159135, 185299, 160794, 160793, 183632, 183631, 183630, 213739, 213738, 67127, 67126, 67125, 67124, 67123, 67122, 67121, 67120, 67119, 172539, 67118, 11438, 184087, 1514, 30560, 30561, 30562, 30563, 30564, 175570, 175571, 30552, 30553, 30554, 30555, 30556, 30557, 30558, 30559, 175699, 210683, 209469, 30393, 30394, 30395, 30396, 209470, 209471, 184100, 184101, 184099, 66097, 151066, 151068, 31114, 151114, 151115, 149605, 84639, 84640, 84641, 84642, 84643, 84644, 84645, 175924, 175926, 175925, 54447, 54371, 54369, 54370, 175927, 175928, 161861, 161860, 161858, 161859, 214031, 214030, 214029, 214028, 34804, 66403, 66402, 66400, 66398, 213519, 213518, 213517, 29047, 15371, 151134, 151135, 151131, 66043, 182306, 182304, 66044, 213746, 213745, 213744, 65032, 65031, 65030, 65017, 65018, 65019, 10307, 10306, 10305, 10304, 10303, 10302, 10301, 10300, 10299, 10298, 65011, 10296, 10297, 151101, 83308, 83306, 83307, 187611, 10309, 10308, 182024, 83315, 182021, 83314, 212005, 61725, 61724, 61723, 61722, 61650, 61672, 61541, 61615, 61616, 61574, 61539, 61627, 61631, 61632, 61633, 61533, 61611, 61537, 61710, 128259, 61499, 61500, 61559, 61501, 61701, 61709, 61609, 61610, 61663, 61638, 63751, 63756, 63757, 63758, 63750, 63752, 63753, 63754, 63755, 63759, 44464, 44463, 44462, 44461, 44460, 44459, 44458, 44457, 44456, 42696, 172872, 143550, 143544, 44470, 44469, 43451, 143547, 143545, 213532, 213531, 213865, 213864, 83313, 83312, 83311, 83310, 83309, 5353, 135471, 135473, 26657, 26654, 26655, 26660};
    turn_penalty = 35.11650428888172115;
    expected = 2076.93155074539208726;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {17473, 176666, 121562, 102948, 102951, 102953, 102955, 141249, 154671, 154672, 120978, 120979, 120980, 109547, 154669, 154666, 116205, 95704, 95705, 95706, 95707, 9053, 35289, 116191, 116209, 116197, 116240, 116245, 116246, 116366, 116367, 116371, 116372, 116201, 116190, 116210, 116211, 213373, 567, 121953, 9038, 9039, 37381, 37382, 37383, 37384, 141136, 37365, 37366, 37367, 138732, 127495, 80896, 80897, 80890, 80889, 80888, 100116, 80874, 138724, 138727, 138729, 138726, 8740, 27183, 110494, 27181, 27182, 110498, 101288, 122397, 126068, 184499, 10581, 10582, 184500, 184498, 110503, 110505, 22187, 22188, 126077, 126078, 126076, 566, 100106, 22216, 22217, 100109, 100110, 100111, 26838, 26839, 26848, 171934, 26842, 110523, 82953, 82944, 110524, 110529, 110530, 11481, 82961, 82962, 110545, 110546, 5472, 12681, 12686, 12689, 12687, 12688, 122300, 5473, 560, 214169, 122290, 562, 213379, 113824, 113821, 84507, 563, 3545, 28313, 215990, 215991, 28314, 110640, 28315, 3546, 28295, 110633, 54464, 54465, 110637, 156903, 6821, 110648, 179337, 179338, 110646, 179339, 159226, 103699, 210721, 210722, 103705, 103715, 212768, 103718, 103722, 103723, 103698, 103724, 103721, 103700, 103710, 23098, 23099, 23100, 23101, 23102, 23103, 168808, 168809, 23107, 23106, 23105, 23104, 98317, 98318};
    turn_penalty = 1.67849613271512799;
    expected = 2083.25150312528512586;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {107683, 107684, 107685, 13132, 13131, 13130, 13129, 13128, 13127, 13126, 13125, 13124, 10637, 101357, 101358, 101359, 101360, 101361, 210741, 86688, 26749, 26750, 84659, 84662, 84663, 211780, 84660, 84661, 135684, 135685, 135711, 135710, 135702, 135715, 135717, 135716, 135720, 135718, 135719, 135728, 135729, 135726, 135725, 45728, 135668, 135670, 135669, 160124, 160123, 160122, 135671, 163197, 163198, 208846, 218341, 135193, 135192, 26582, 26583, 153189, 81441, 153188, 45183, 105926, 105927, 111244, 159127, 159128, 105928, 121951, 395, 134418, 134419, 174818, 174819, 174817, 129809, 134488, 134578, 134579, 134573, 134571, 134572, 134430, 134429, 130578, 130574, 136141, 136142, 130483, 130479, 129841, 129840, 129838, 129803, 129804, 129805, 129813, 129810, 129802, 129800, 129765, 129763, 129764, 129760, 129761, 129762, 176119, 176118, 114399, 114394, 114395, 114396, 110435, 110436, 110433, 441, 26745, 26746, 26747, 54490, 23, 93185, 116232, 93186, 93187, 22, 24, 116388, 25, 116390, 138052, 116386, 110441, 135096, 135103, 135104, 135098, 135102, 177167, 135099, 135100, 135101, 116398, 116399, 1553, 1554, 111898, 116222, 173531, 111896, 120032, 119297, 119296, 119293, 60835, 60836, 18059, 18060, 127360, 127361, 127362, 127363, 127364, 169226, 127330, 127331, 25378, 25379, 127433, 127435, 127436, 123656, 123655, 123659, 136739, 169227, 25366, 25367, 134060, 18063, 18064, 86625, 86626, 123636, 102136, 102137, 123926, 102139, 102140, 123924, 86558, 86559, 86555, 86556, 123928, 127350, 86554, 86553, 86552, 86560, 123925};
    turn_penalty = 11.47564690315255298;
    expected = 2164.08191236915718036;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {186513, 186512, 186511, 186523, 186524, 186522, 186521, 133850, 186520, 186519, 186491, 185585, 2049, 2050, 185591, 206456, 185555, 185557, 185556, 185558, 185559, 185564, 185560, 185563, 185565, 185582, 185572, 185573, 185578, 185579, 185580, 185545, 185535, 185538, 185539, 185673, 185672, 185666, 185667, 185669, 185671, 185665, 185664, 185448, 185532, 185530, 186012, 186007, 186011, 186008, 186010, 186013, 185438, 185449, 185456, 205729, 185454, 185446, 185447, 185457, 185458, 185459, 185461, 185429, 164065, 164063, 181277, 181279, 164067, 164062, 164064, 171284, 171285, 156608, 206494, 206495, 206496, 136792, 136799, 136794, 136807, 136795, 136797, 136798, 85679, 85680, 162642, 162518, 162522, 162523, 162517, 162640, 163372, 163373, 163374, 213797, 181398, 168432, 100061, 100062, 100063, 100064, 61763, 61847, 61848, 61909, 61855, 61913, 61819, 61878, 61877, 61917, 61875, 61874, 61873, 61872, 61799, 61798, 61849, 61880, 61809, 61923, 61960, 61959, 61854, 61853, 61769, 61814, 61888, 61938, 61906, 61839, 61838, 61837, 61836, 61835, 61813, 61810, 61863, 61950, 62587, 62588, 62573, 62572, 62571, 62575, 62549, 62560, 62568, 62567, 62594, 62593, 62592, 62591, 62590, 62586, 62582, 62583, 62579, 62578, 62577, 62576, 62581, 62580, 62589, 62570, 166385, 166386, 28708, 28709, 28710, 28711, 152535, 152536, 152532, 152533, 152534, 46009, 156634, 156633, 156632, 156635, 156638, 156639, 156636, 156637, 65933, 160786, 16764, 16765, 19814, 19820, 28463, 28464, 28465, 16755, 16752, 16756, 16746, 110527, 26840, 26841, 110522, 26830, 26831, 26826, 26827, 144229, 144230, 100107, 110510, 22210, 22211, 110512, 110511, 6022, 126074, 126075, 110518, 110519, 22193, 22194, 110504, 100108, 113340, 8748, 110491, 110490, 110492, 100127, 110493, 27175, 27176, 27188, 27189, 6037, 6038, 138725, 138730, 138728, 80875, 138723, 80879, 80880, 80881, 80902, 80903, 112472, 112473, 37373, 37374, 37375, 37376, 37377, 151402, 151403, 37387, 15135, 9044, 9045, 9046, 121952, 0, 165240, 165241, 213374, 15147, 7810, 102106, 15, 110366, 110368, 15158, 123472, 152222, 896, 152221, 183328, 150317, 161887, 161888, 150315, 150316, 161889, 161890, 54760, 54769, 54764, 54771, 116956, 116957, 116958, 116959, 116960, 116961, 116962, 116963, 116964, 116965, 116966, 116967, 116968, 116969, 116970, 116971};
    turn_penalty = 43.26898993091053569;
    expected = 2311.14941320602656560;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {12009, 12008, 11994, 122141, 122140, 122139, 122138, 122137, 122136, 122135, 122134, 122133, 122132, 122131, 122130, 122129, 122128, 122127, 122126, 122125, 123363, 123368, 160863, 173578, 2693, 160880, 160598, 160597, 160596, 135862, 135863, 2694, 110919, 110918, 110917, 112439, 112438, 112437, 112436, 135857, 135856, 135855, 135854, 112446, 112445, 112444, 112443, 112442, 112441, 112440, 110853, 110852, 110851, 110850, 110849, 110848, 110847, 110846, 110845, 110844, 110843, 110842, 110841, 110840, 110839, 110838, 110837, 110836, 187746, 187745, 187744, 187743, 187751, 187750, 187749, 187748, 187747, 186066, 186065, 82632, 110835, 110834, 95535, 95534, 95533, 95532, 95531, 858, 19389, 181318, 144129, 144128, 144127, 144126, 82876, 82875, 82874, 82873, 12850, 12849, 15412, 132172, 132173, 111917, 182702, 182705, 182709, 152985, 152986, 152987, 152988, 152989, 152990, 83168, 83169, 83170, 83171, 83172, 83173, 83167, 149590, 52426, 52427, 182700, 121661, 182706, 83183, 83181, 135462, 209240, 188555, 188556, 183332, 183333, 188271, 182708, 182712, 182713, 217624, 119064, 28686, 28687, 209136, 209135, 110477, 110478, 14519, 14520, 1475, 14499, 14500, 150428, 155456, 8765, 8766, 100122, 100123, 126068, 184499, 10581, 10582, 184500, 184498, 110503, 110505, 22187, 22188, 126077, 126078, 126076, 566, 100106, 22216, 22217, 100109, 100110, 100111, 26838, 26839, 26848, 171934, 26842, 110523, 82953, 82944, 110524, 110529, 11479, 11480, 2646, 82963, 110547, 2393, 26937, 26938, 82314, 82315, 135038, 135041, 135033, 135039, 135034, 135044, 178407, 12702, 12703, 122318, 122320, 3499, 12710, 12713, 111036, 100998, 178408, 3501, 124391, 124392, 3503, 183625, 127283, 127282, 127281, 130931, 130930, 130929, 117994, 151574, 130994, 130995, 27446, 27447, 27448, 27449, 27450, 27451, 27452, 27453, 27454, 27455, 27456, 27457, 27505, 27506, 27507, 27508, 27509, 148926, 148933, 218578, 182059, 148927, 148872, 27510, 212785, 212784, 212787, 148934, 148935, 213620, 213621, 213622, 213623, 213624, 213625, 52453, 52454, 52455, 52456, 52457, 152381, 12742, 2047, 206140, 163274, 163636, 163273, 182047, 12768, 12769, 12770, 12767, 12749, 12750, 12751, 185164, 156513, 156514, 156515, 156516, 185144, 185142, 185143, 163995, 164003, 163996, 185301, 181676, 181677, 181678, 181679, 181680, 181684, 181697, 165615, 92791, 92792, 96318, 96319};
    turn_penalty = 36.43049940423171051;
    expected = 2438.42524702747459742;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {212908, 212909, 15375, 134661, 182421, 130822, 130823, 130824, 130821, 34805, 163282, 126780, 126782, 15380, 15379, 15378, 15376, 134671, 85366, 85365, 134673, 182425, 182424, 15647, 182418, 182420, 15645, 15646, 182419, 182422, 134674, 33298, 33297, 182429, 182428, 182427, 182426, 213580, 182423, 84474, 84473, 84472, 84471, 84470, 84469, 84468, 84467, 84466, 84465, 188602, 188607, 188606, 188605, 188604, 188603, 182711, 135664, 115333, 115332, 115331, 115330, 188595, 210654, 210653, 210652, 176392, 176391, 183942, 183941, 82643, 82642, 82644, 182701, 182707, 115329, 82645, 1465, 106485, 217627, 119063, 119064, 28686, 28687, 209136, 209135, 110477, 110478, 14519, 14520, 1475, 14499, 14500, 1479, 8761, 8762, 103304, 8745, 8744, 110502, 110497, 27177, 27178, 27186, 27187, 550, 551, 80872, 80886, 80885, 80884, 80900, 80901, 37370, 37371, 37372, 15139, 15138, 9042, 9043, 1, 7811, 102107, 535, 110381, 60314, 60315, 13216, 13215, 13242, 13243, 60789, 60790, 60770, 60771, 134916, 134915, 537, 134649, 82280, 82281, 13330, 13331, 13332, 102718, 538, 102719, 150773, 102697, 102693, 540, 9002, 9001, 9007, 9008, 102675, 102685, 543, 8868, 102357, 102354, 110207, 545, 548, 110185, 102535, 106033, 93680, 93678, 102534, 46233, 46234, 137528, 549, 85756, 106023, 106027, 141161, 174946, 59707, 59687, 59748, 175483, 180024, 59781, 59782, 175482, 180020, 156836, 171071, 171072, 171073, 171074, 171076, 173839, 173838, 173834, 103872, 103841, 103856, 103843, 103848, 175387, 175388, 175420, 175391, 175398, 175397, 175403, 175412};
    turn_penalty = 30.26936737054028725;
    expected = 2487.83926669375523488;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {105108, 154712, 154708, 162478, 162503, 162504, 162505, 162479, 162481, 162482, 162483, 162484, 162485, 108316, 108317, 108318, 166378, 166379, 166380, 26477, 26473, 26474, 26475, 26476, 216863, 216862, 153562, 153561, 153560, 153559, 153558, 153557, 153556, 153555, 153554, 153553, 153552, 153551, 153550, 153549, 153548, 153547, 153546, 43178, 181002, 181003, 181001, 162726, 184475, 42233, 43177, 153545, 166241, 166242, 153766, 153767, 153768, 153769, 153770, 153771, 153772, 153773, 153774, 153775, 117764, 117765, 209475, 209476, 147248, 147249, 147250, 147251, 147252, 147253, 147254, 147255, 147256, 209477, 147247, 166243, 147257, 147258, 169697, 169695, 169696, 169683, 169684, 169685, 169678, 169681, 169680, 217617, 217618, 217619, 217620, 155953, 155954, 155955, 171283, 133854, 133853, 133858, 133859, 133860, 133851, 128195, 167342, 167344, 167345, 167340, 167341, 213267, 213275, 213276, 167873, 167874, 167875, 167876, 180892, 180882, 180890, 167877, 167878, 167879, 208617, 208618, 208619, 208620, 208594, 208604, 208613, 208614, 208591, 208592, 208597, 208616, 180887, 180889, 180880, 180883, 180891, 181268, 215428, 215426, 215425, 215422, 215417, 215420, 215419, 215418, 215413, 215407, 215409, 215410, 215408, 215405, 215402, 215404, 215401, 164013, 181266, 181273, 181270, 164054, 164055, 108386, 212064, 212065, 212062, 212066, 3619, 101400, 110728, 7658, 101389, 7644, 7645, 46262, 46258, 111010, 46252, 46250, 46251, 521, 20109, 111014, 453, 111024, 111025, 111023, 111032, 111033, 117120, 46263, 12692, 26920, 3516, 46274, 46268, 12717, 12716, 133776, 12715, 12708, 2394, 122319, 122317, 12705, 12704, 135042, 135043, 135035, 135036, 135037, 135040, 82316, 82317, 26939, 26940, 110550, 110551, 11498, 2647, 110544, 82965, 82966, 110543, 110539, 110525, 110528, 82950, 82946, 110526, 110527, 26840, 26841, 110522, 26830, 26831, 26826, 26827, 144229, 144230, 100107, 110510, 22210, 22211, 110512, 110511, 6022, 126074, 126075, 110518, 110519, 22193, 22194, 110504, 100108, 113340, 8748, 110491, 110490, 110492, 100127, 110493, 27175, 27176, 27188, 27189, 6037, 6038, 138725, 138730, 138728, 80875, 138723, 80879, 80880, 80881, 80902, 80903, 112472, 112473, 37373, 37374, 37375, 37376, 37377, 151402, 151403, 37387, 15135, 9044, 9045, 9046, 121952, 0, 165240, 165241, 213374, 15147, 7810, 102106, 110363, 110364, 568, 110371, 110372, 110373, 60316, 60317, 13212, 13213, 2317, 110387, 136651, 135998, 135997, 135992, 135995, 197887, 197886, 197885, 197884, 197893, 208720};
    turn_penalty = 0.00000000000000000;
    expected = 2569.86552081682657445;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;

    path = {27687, 27688, 27689, 27690, 27673, 27675, 27674, 3815, 27727, 178574, 178577, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 27771, 27772, 27773, 27774, 27775, 27776, 27777, 59122, 59123, 59124, 9013, 171043, 112487, 17166, 17167, 59201, 206702, 206703, 206704, 206705, 206706, 27783, 2791, 102666, 139473, 112480, 102690, 102691, 102688, 102695, 102696, 102716, 150779, 11794, 150778, 150782, 102717, 138055, 13326, 13327, 151385, 82284, 134913, 134912, 124953, 82285, 5833, 134648, 3, 4, 112474, 112475, 60765, 60766, 60767, 60785, 60786, 13245, 13246, 13247, 13248, 13219, 13220, 60310, 60311, 110386, 110385, 110380, 110369, 110370, 165242, 165243, 165244, 102104, 15145, 15144, 7809, 122391, 213372, 213373, 567, 121953, 9038, 9039, 37381, 37382, 37383, 37384, 141136, 37365, 37366, 37367, 138732, 127495, 80896, 80897, 80890, 80889, 80888, 100116, 80874, 138724, 138727, 138729, 138726, 8740, 27183, 110494, 27181, 27182, 110498, 101288, 122397, 126068, 184499, 10581, 10582, 184500, 184498, 110503, 110505, 22187, 22188, 126077, 126078, 126076, 566, 100106, 22216, 22217, 100109, 100110, 100111, 26838, 26839, 26848, 171934, 26842, 110523, 82953, 82944, 110524, 110529, 11479, 11480, 2646, 82963, 110547, 2393, 26937, 26938, 82314, 82315, 135038, 135041, 135033, 135039, 135034, 135044, 178407, 12702, 12703, 122318, 122320, 3499, 12710, 12713, 111036, 100998, 178408, 3501, 124391, 124392, 3502, 124368, 27209, 151573, 151574, 130994, 130995, 27446, 27447, 27448, 27449, 27450, 27451, 27452, 27453, 27454, 27455, 27456, 27457, 27505, 27506, 27507, 27508, 27509, 148926, 148933, 218578, 182059, 148927, 148872, 27510, 212785, 212784, 212787, 148934, 148935, 213620, 213621, 213622, 213623, 213624, 213625, 52453, 52454, 52455, 52456, 52457, 152381, 12742, 2047, 206140, 163274, 163636, 163273, 182047, 12768, 12769, 12770, 12767, 12749, 12750, 12751, 185164, 156513, 156514, 156515, 156516, 185144, 185142, 185143, 163995, 164003, 163996, 185301, 181676, 181677, 181678, 181679, 181680, 181684, 181682, 181698, 181696, 181691, 181692, 205838, 205839, 205840, 165612, 24425, 24426, 184826, 184831, 184832, 184830, 184824, 184825, 184821, 206655, 39562, 39561, 80234, 80235, 39567};
    turn_penalty = 4.31686029372284885;
    expected = 2636.46384911358245517;
    actual = computePathTravelTime(path, turn_penalty);
    std::cout << actual << std::endl;
    std::cout << expected << std::endl;
    std::cout << (expected - actual) / turn_penalty << std::endl << std::endl;
}

// The start routine of your program (main) when you are running your standalone
// mapper program. This main routine is *never called* when you are running 
// ece297exercise (the unit tests) -- those tests have their own main routine
// and directly call your functions in /libstreetmap/src/ to test them.
// Don't write any code in this file that you want run by ece297exerise -- it 
// will not be called!
int main(int argc, char** argv) {

    std::string map_path;
    std::string osm_path;
    if(argc == 1) {
        //Use a default map
        map_path = default_map_path;
    } else if (argc == 2) {
        //Get the map from the command line
        map_path = argv[1];
    } else {
        //Invalid arguments
        std::cerr << "Usage: " << argv[0] << " [map_file_path]\n";
        std::cerr << "  If no map_file_path is provided a default map is loaded.\n";
        return BAD_ARGUMENTS_EXIT_CODE;
    }

    //Load the map and related data structures
    bool load_success = loadMap(map_path);
    if(!load_success) {
        std::cerr << "Failed to load map '" << map_path << "'\n";
        return ERROR_EXIT_CODE;
    }

    std::cout << "Successfully loaded map '" << map_path << "'\n";

    //You can now do something with the map data
    //drawMap();

    tester();

    //Clean-up the map data and related data structures
    std::cout << "Closing map\n";
    closeMap(); 

    return SUCCESS_EXIT_CODE;
}
